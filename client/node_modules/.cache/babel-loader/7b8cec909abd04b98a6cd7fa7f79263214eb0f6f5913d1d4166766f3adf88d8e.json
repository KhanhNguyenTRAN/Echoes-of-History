{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\EchoesOfHistory\\\\client\\\\src\\\\components\\\\ProtectedRoute.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\n\n// Mock authentication function to get token and role\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getAuthenticatedUser = () => {\n  const token = localStorage.getItem('token'); // Assuming token is stored in localStorage\n  const isAdmin = localStorage.getItem('isAdmin'); // Assuming isAdmin is stored in localStorage\n  return {\n    token,\n    isAdmin\n  };\n};\nconst ProtectedRoute = ({\n  children,\n  adminOnly = false\n}) => {\n  const {\n    token,\n    isAdmin\n  } = getAuthenticatedUser();\n  if (!token) {\n    // If no token, redirect to login\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n  if (adminOnly && !JSON.parse(isAdmin)) {\n    // If the route is admin-only and the user is not an admin, redirect to a forbidden or home page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n  return children; // If all conditions are met, render the child components\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","getAuthenticatedUser","token","localStorage","getItem","isAdmin","ProtectedRoute","children","adminOnly","to","fileName","_jsxFileName","lineNumber","columnNumber","JSON","parse","_c","$RefreshReg$"],"sources":["C:/Project/EchoesOfHistory/client/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n// Mock authentication function to get token and role\r\nconst getAuthenticatedUser = () => {\r\n  const token = localStorage.getItem('token'); // Assuming token is stored in localStorage\r\n  const isAdmin = localStorage.getItem('isAdmin'); // Assuming isAdmin is stored in localStorage\r\n  return { token, isAdmin };\r\n};\r\n\r\nconst ProtectedRoute = ({ children, adminOnly = false }) => {\r\n  const { token, isAdmin } = getAuthenticatedUser();\r\n\r\n  if (!token) {\r\n    // If no token, redirect to login\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  if (adminOnly && !JSON.parse(isAdmin)) {\r\n    // If the route is admin-only and the user is not an admin, redirect to a forbidden or home page\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return children; // If all conditions are met, render the child components\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,MAAMC,OAAO,GAAGF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;EACjD,OAAO;IAAEF,KAAK;IAAEG;EAAQ,CAAC;AAC3B,CAAC;AAED,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS,GAAG;AAAM,CAAC,KAAK;EAC1D,MAAM;IAAEN,KAAK;IAAEG;EAAQ,CAAC,GAAGJ,oBAAoB,CAAC,CAAC;EAEjD,IAAI,CAACC,KAAK,EAAE;IACV;IACA,oBAAOF,OAAA,CAACF,QAAQ;MAACW,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAIL,SAAS,IAAI,CAACM,IAAI,CAACC,KAAK,CAACV,OAAO,CAAC,EAAE;IACrC;IACA,oBAAOL,OAAA,CAACF,QAAQ;MAACW,EAAE,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5B;EAEA,OAAON,QAAQ,CAAC,CAAC;AACnB,CAAC;AAACS,EAAA,GAdIV,cAAc;AAgBpB,eAAeA,cAAc;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}